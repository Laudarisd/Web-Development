{"ast":null,"code":"import React,{useState,useEffect}from'react';import Navbar from'./js/Navbar';import Home from'./js/Home';//import Login from './js/Login';\n// import './css/Login.css'\nimport AboutUs from'./js/Aboutus';// import AdminPanel from './js/AdminPanel';\nimport AiMl from'./js/AiMl';import Ds from'./js/Ds';import Python from'./js/Python';// import Forgotpw from './js/Forgotpw';\n// import Signup from './js/Signup';\nimport Footer from'./js/Footer';import Coding from'./js/Coding';import{Routes,Route}from'react-router-dom';import'mdb-react-ui-kit/dist/css/mdb.min.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function App(){useEffect(()=>{console.log('App component mounted');// You can also check the current URL here\nconsole.log(window.location.pathname);},[]);// const [isLoggedIn, setIsLoggedIn] = useState(false);\n// const [isAdmin, setIsAdmin] = useState(false);\n// const navigate = useNavigate();\n// const handleSignup = async (email, password, firstName, lastName, phoneNumber) => {\n//   console.log(\"handleSignup called with:\", email, password, firstName, lastName, phoneNumber);\n//   try {\n//       const response = await fetch('http://localhost:3001/signup', {\n//           method: 'POST',\n//           headers: {\n//               'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify({ email, password, firstName, lastName, phoneNumber })\n//       });\n//       const data = await response.text();\n//       if (response.ok) {\n//           alert(data);\n//           navigate('/login'); // Navigate to login after successful signup\n//       } else {\n//           alert(data); // Show error from server response\n//       }\n//   } catch (error) {\n//       console.error('Signup error:', error);\n//       alert('Signup failed');\n//   }\n// };\n//   const handleLogin = async (email, password) => {\n//     // Regular expressions for email and password validation\n//     const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n//     const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n//     // Check if both email and password are entered\n//     if (!email || !password) {\n//         alert(\"Please enter both email and password\");\n//         return;\n//     }\n//     // Check if email is in valid format\n//     if (!emailRegex.test(email)) {\n//         alert(\"Please enter a valid email\");\n//         return;\n//     }\n//     // Check if password is in valid format\n//     if (!passwordRegex.test(password)) {\n//         alert(\"Please enter a valid password\");\n//         return;\n//     }\n//     try {\n//         const response = await fetch('http://localhost:3001/login', {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({ email, password })\n//         });\n//         const data = await response.text();\n//         if (response.ok) {\n//             setIsLoggedIn(true);\n//             setIsAdmin(email === 'admin@example.com');\n//             navigate('/');\n//         } else {\n//             alert(data); // Display error message from the server\n//         }\n//     } catch (error) {\n//         console.error('Login error:', error);\n//         alert('Login failed');\n//     }\n// };\n// const handleLogout = () => {\n//     setIsLoggedIn(false);\n//     setIsAdmin(false);\n//     navigate('/login'); // Redirect to login page on logout\n// };\n//   if (!isLoggedIn) {\n//     return (\n//       <Routes>\n//         {/* <Route path=\"/signup\" element={<Signup onSignup={handleSignup} />} /> */}\n//         {/* <Route path=\"/forgotpw\" element={<Forgotpw />} /> */}\n//         {/* <Route path=\"/login\" element={<Login onLogin={handleLogin} />} /> */}\n//         {/* Redirect to login by default */}\n//         <Route path=\"*\" element={<Login onLogin={handleLogin} />} />\n//       </Routes>\n//     );\n//   }\nreturn/*#__PURE__*/ (// <>\n//   <Navbar isLoggedIn={isLoggedIn} onLogout={handleLogout} />\n//   <Routes>\n//     <Route path=\"/\" element={<Home />} />\n//     <Route path=\"/about\" element={<AboutUs />} />\n//     {/* For dropdown button */}\n//     <Route path=\"/aiml\" element={<AiMl />} />\n//     <Route path=\"/Ds\" element={<Ds />} />\n//     <Route path = \"/Coding\" element={<Coding />} />\n//     <Route path = \"/python\" element= {<Python />} />\n//     {/* <Route path=\"/signup\" element={<Signup onSignup={handleSignup} />} /> */}\n//     {/* <Route path=\"/forgotpw\" element={<Forgotpw/>}></Route> */}\n//     {/* {isAdmin && <Route path=\"/admin\" element={<AdminPanel />} />} */}\n//     {/* Redirect or show a not found component for unmatched routes */}\n//   </Routes>\n//   <Footer />\n// </>\n_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(Home,{})}),/*#__PURE__*/_jsx(Route,{path:\"/about\",element:/*#__PURE__*/_jsx(AboutUs,{})}),/*#__PURE__*/_jsx(Route,{path:\"/aiml\",element:/*#__PURE__*/_jsx(AiMl,{})}),/*#__PURE__*/_jsx(Route,{path:\"/ds\",element:/*#__PURE__*/_jsx(Ds,{})}),/*#__PURE__*/_jsx(Route,{path:\"/coding\",element:/*#__PURE__*/_jsx(Coding,{})}),/*#__PURE__*/_jsx(Route,{path:\"/python\",element:/*#__PURE__*/_jsx(Python,{})})]}),/*#__PURE__*/_jsx(Footer,{})]}));}export default App;","map":{"version":3,"names":["React","useState","useEffect","Navbar","Home","AboutUs","AiMl","Ds","Python","Footer","Coding","Routes","Route","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","console","log","window","location","pathname","children","path","element"],"sources":["/Users/slau8405/Desktop/work_space/work_space/project/learningHub/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Navbar from './js/Navbar';\nimport Home from './js/Home';\n//import Login from './js/Login';\n// import './css/Login.css'\nimport AboutUs from './js/Aboutus';\n// import AdminPanel from './js/AdminPanel';\nimport AiMl from './js/AiMl';\nimport Ds from './js/Ds';\nimport Python from './js/Python';\n// import Forgotpw from './js/Forgotpw';\n// import Signup from './js/Signup';\nimport Footer from './js/Footer';\nimport Coding from './js/Coding';\nimport { Routes, Route } from 'react-router-dom';\nimport 'mdb-react-ui-kit/dist/css/mdb.min.css';\n\n\nfunction App() {\n  useEffect(() => {\n    console.log('App component mounted');\n    // You can also check the current URL here\n    console.log(window.location.pathname);\n  }, []); \n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // const [isAdmin, setIsAdmin] = useState(false);\n  // const navigate = useNavigate();\n\n  // const handleSignup = async (email, password, firstName, lastName, phoneNumber) => {\n  //   console.log(\"handleSignup called with:\", email, password, firstName, lastName, phoneNumber);\n  //   try {\n  //       const response = await fetch('http://localhost:3001/signup', {\n  //           method: 'POST',\n  //           headers: {\n  //               'Content-Type': 'application/json',\n  //           },\n  //           body: JSON.stringify({ email, password, firstName, lastName, phoneNumber })\n  //       });\n\n  //       const data = await response.text();\n\n  //       if (response.ok) {\n  //           alert(data);\n  //           navigate('/login'); // Navigate to login after successful signup\n  //       } else {\n  //           alert(data); // Show error from server response\n  //       }\n  //   } catch (error) {\n  //       console.error('Signup error:', error);\n  //       alert('Signup failed');\n  //   }\n  // };\n  \n//   const handleLogin = async (email, password) => {\n//     // Regular expressions for email and password validation\n//     const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n//     const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\n\n//     // Check if both email and password are entered\n//     if (!email || !password) {\n//         alert(\"Please enter both email and password\");\n//         return;\n//     }\n\n//     // Check if email is in valid format\n//     if (!emailRegex.test(email)) {\n//         alert(\"Please enter a valid email\");\n//         return;\n//     }\n\n//     // Check if password is in valid format\n//     if (!passwordRegex.test(password)) {\n//         alert(\"Please enter a valid password\");\n//         return;\n//     }\n\n//     try {\n//         const response = await fetch('http://localhost:3001/login', {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify({ email, password })\n//         });\n\n//         const data = await response.text();\n//         if (response.ok) {\n//             setIsLoggedIn(true);\n//             setIsAdmin(email === 'admin@example.com');\n//             navigate('/');\n//         } else {\n//             alert(data); // Display error message from the server\n//         }\n//     } catch (error) {\n//         console.error('Login error:', error);\n//         alert('Login failed');\n//     }\n// };\n\n// const handleLogout = () => {\n//     setIsLoggedIn(false);\n//     setIsAdmin(false);\n//     navigate('/login'); // Redirect to login page on logout\n// };\n//   if (!isLoggedIn) {\n//     return (\n//       <Routes>\n//         {/* <Route path=\"/signup\" element={<Signup onSignup={handleSignup} />} /> */}\n//         {/* <Route path=\"/forgotpw\" element={<Forgotpw />} /> */}\n//         {/* <Route path=\"/login\" element={<Login onLogin={handleLogin} />} /> */}\n//         {/* Redirect to login by default */}\n//         <Route path=\"*\" element={<Login onLogin={handleLogin} />} />\n//       </Routes>\n\n//     );\n//   }\n  return (\n    // <>\n    //   <Navbar isLoggedIn={isLoggedIn} onLogout={handleLogout} />\n    //   <Routes>\n    //     <Route path=\"/\" element={<Home />} />\n    //     <Route path=\"/about\" element={<AboutUs />} />\n    //     {/* For dropdown button */}\n    //     <Route path=\"/aiml\" element={<AiMl />} />\n    //     <Route path=\"/Ds\" element={<Ds />} />\n    //     <Route path = \"/Coding\" element={<Coding />} />\n    //     <Route path = \"/python\" element= {<Python />} />\n    //     {/* <Route path=\"/signup\" element={<Signup onSignup={handleSignup} />} /> */}\n    //     {/* <Route path=\"/forgotpw\" element={<Forgotpw/>}></Route> */}\n    //     {/* {isAdmin && <Route path=\"/admin\" element={<AdminPanel />} />} */}\n    //     {/* Redirect or show a not found component for unmatched routes */}\n    //   </Routes>\n    //   <Footer />\n      \n    // </>\n      <>\n        <Navbar />\n        <Routes>\n        <Route path=\"/\" element={<Home />} />\n          <Route path=\"/about\" element={<AboutUs />} />\n          {/* For dropdown button */}\n          <Route path=\"/aiml\" element={<AiMl />} />\n          <Route path=\"/ds\" element={<Ds />} />\n          <Route path=\"/coding\" element={<Coding />} />\n          <Route path=\"/python\" element={<Python />} />\n          {/* {isAdmin && <Route path=\"/admin\" element={<AdminPanel />} />} */}\n          {/* Redirect or show a not found component for unmatched routes */}\n          {/* <Route path=\"*\" element={<NotFoundComponent />} /> */}\n        </Routes>\n        <Footer />\n      </>\n  );\n}\n\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,MAAM,KAAM,aAAa,CAChC,MAAO,CAAAC,IAAI,KAAM,WAAW,CAC5B;AACA;AACA,MAAO,CAAAC,OAAO,KAAM,cAAc,CAClC;AACA,MAAO,CAAAC,IAAI,KAAM,WAAW,CAC5B,MAAO,CAAAC,EAAE,KAAM,SAAS,CACxB,MAAO,CAAAC,MAAM,KAAM,aAAa,CAChC;AACA;AACA,MAAO,CAAAC,MAAM,KAAM,aAAa,CAChC,MAAO,CAAAC,MAAM,KAAM,aAAa,CAChC,OAASC,MAAM,CAAEC,KAAK,KAAQ,kBAAkB,CAChD,MAAO,uCAAuC,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,gCAAAC,QAAA,IAAAC,SAAA,yBAG/C,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACbjB,SAAS,CAAC,IAAM,CACdkB,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC,CACpC;AACAD,OAAO,CAACC,GAAG,CAACC,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAAC,CACvC,CAAC,CAAE,EAAE,CAAC,CACN;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEF;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACE,oBACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACER,KAAA,CAAAE,SAAA,EAAAO,QAAA,eACEX,IAAA,CAACX,MAAM,GAAE,CAAC,cACVa,KAAA,CAACL,MAAM,EAAAc,QAAA,eACPX,IAAA,CAACF,KAAK,EAACc,IAAI,CAAC,GAAG,CAACC,OAAO,cAAEb,IAAA,CAACV,IAAI,GAAE,CAAE,CAAE,CAAC,cACnCU,IAAA,CAACF,KAAK,EAACc,IAAI,CAAC,QAAQ,CAACC,OAAO,cAAEb,IAAA,CAACT,OAAO,GAAE,CAAE,CAAE,CAAC,cAE7CS,IAAA,CAACF,KAAK,EAACc,IAAI,CAAC,OAAO,CAACC,OAAO,cAAEb,IAAA,CAACR,IAAI,GAAE,CAAE,CAAE,CAAC,cACzCQ,IAAA,CAACF,KAAK,EAACc,IAAI,CAAC,KAAK,CAACC,OAAO,cAAEb,IAAA,CAACP,EAAE,GAAE,CAAE,CAAE,CAAC,cACrCO,IAAA,CAACF,KAAK,EAACc,IAAI,CAAC,SAAS,CAACC,OAAO,cAAEb,IAAA,CAACJ,MAAM,GAAE,CAAE,CAAE,CAAC,cAC7CI,IAAA,CAACF,KAAK,EAACc,IAAI,CAAC,SAAS,CAACC,OAAO,cAAEb,IAAA,CAACN,MAAM,GAAE,CAAE,CAAE,CAAC,EAIvC,CAAC,cACTM,IAAA,CAACL,MAAM,GAAE,CAAC,EACV,CAAC,EAET,CAGA,cAAe,CAAAU,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}